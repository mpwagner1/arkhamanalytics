# =======================================
# Auto-generated by gpt-4o
# Date: 2025-06-16
# Module: example_module.py
# Prompt SHA256: 0dc19c41e8bd
# =======================================
To create unit tests for the provided module, we'll organize the tests under the `ingestion/tests/` directory using the `test_*.py` naming convention. We'll use `pytest` for writing the tests and `pytest-cov` to ensure coverage is collected. We'll also use mocking where necessary, although the current functions don't require external dependencies that need mocking.

Here's how you can structure the tests:

1. **Create the directory structure:**

   ```
   ingestion/
       tests/
           test_utils.py
   ```

2. **Write the tests in `test_utils.py`:**

```python
import pytest
from ingestion.utils import (
    is_palindrome,
    add_numbers,
    get_max_value,
    normalize_string,
    divide,
    reverse_list,
    subtract,
    multiply,
    safe_divide,
    power,
    square,
    is_anagram,
)


def test_is_palindrome():
    assert is_palindrome("radar") is True
    assert is_palindrome("hello") is False
    assert is_palindrome("") is True
    assert is_palindrome("a") is True


def test_add_numbers():
    assert add_numbers(1, 2) == 3
    assert add_numbers(-1, 1) == 0
    assert add_numbers(0, 0) == 0


def test_get_max_value():
    assert get_max_value([1, 2, 3]) == 3
    assert get_max_value([-1, -2, -3]) == -1
    with pytest.raises(ValueError):
        get_max_value([])


def test_normalize_string():
    assert normalize_string("  Hello   World  ") == "hello world"
    assert normalize_string("TEST") == "test"
    assert normalize_string("") == ""


def test_divide():
    assert divide(10, 2) == 5.0
    assert divide(-10, 2) == -5.0
    with pytest.raises(ZeroDivisionError):
        divide(10, 0)


def test_reverse_list():
    assert reverse_list([1, 2, 3]) == [3, 2, 1]
    assert reverse_list([]) == []
    assert reverse_list([1]) == [1]


def test_subtract():
    assert subtract(10, 5) == 5
    assert subtract(-1, -1) == 0
    assert subtract(0, 0) == 0


def test_multiply():
    assert multiply(3, 4) == 12
    assert multiply(-1, 5) == -5
    assert multiply(0, 100) == 0


def test_safe_divide():
    assert safe_divide(10, 2) == 5.0
    assert safe_divide(-10, 2) == -5.0
    with pytest.raises(ValueError):
        safe_divide(10, 0)


def test_power():
    assert power(2, 3) == 8
    assert power(5, 0) == 1
    assert power(2, -2) == 0.25


def test_square():
    assert square(3) == 9
    assert square(-3) == 9
    assert square(0) == 0


def test_is_anagram():
    assert is_anagram("listen", "silent") is True
    assert is_anagram("hello", "world") is False
    assert is_anagram("", "") is True
    assert is_anagram("a", "a") is True
```

3. **Setup `pytest-cov` for coverage:**

   Add the following to your `pytest.ini` or run it directly with the command:

   ```ini
   [pytest]
   addopts = --cov=ingestion --cov-report=term-missing
   ```

   Or run:

   ```bash
   pytest --cov=ingestion --cov-report=term-missing
   ```

4. **Ensure code formatting and linting:**

   Run `black --check ingestion/tests/` to ensure the code is formatted correctly.

   Run `flake8 --max-line-length=100 ingestion/tests/` to ensure there are no linting errors.

This setup will ensure that your tests cover both normal and edge cases for the provided functions, and the use of `pytest-cov` will help you track the coverage of your tests.